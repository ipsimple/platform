name: Build & Release

run-name: "Build & Release #${{ github.run_number }}"
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine_version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine the version
      id: determine_version
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git fetch --tags
    
        # Fetch the latest valid tag that matches the expected pattern
        LATEST_TAG=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
    
        if [ -z "$LATEST_TAG" ]; then
          NEW_TAG="v0.0.1"
        else
          VERSION_REGEX="^v([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $LATEST_TAG =~ $VERSION_REGEX ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            MINOR=$((MINOR + 1))
            if [ $MINOR -eq 100 ]; then
              MINOR=0
              MAJOR=$((MAJOR + 1))
            fi
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          else
            echo "Error: Latest tag is not in the expected format: $LATEST_TAG"
            exit 1
          fi
        fi
    
        # Output the version to GitHub Actions log
        echo "Generated version: $NEW_TAG"
        
        # Set the version as an output
        echo "version=$NEW_TAG" >> $GITHUB_ENV
        echo "version=$NEW_TAG" >> $GITHUB_OUTPUT
  codeql-scan:
    runs-on: ubuntu-latest
    outputs:
      security_status: ${{ steps.security_summary.outputs.status }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp'
        config-file: ./.github/codeql/codeql-config.yml

    - name: Build the code
      run: dotnet build src/IpSimple.Platform.sln --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"
        upload: true
        
    - name: Generate security summary
      id: security_summary
      if: always()
      run: |
        echo "CodeQL analysis completed. The workflow will fail automatically if critical security issues are found."
        echo "Check the Security tab in your repository for detailed results."
        echo "status=✅ CodeQL security analysis completed - No critical issues blocking release" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [determine-version, codeql-scan]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build solution
      run: dotnet build src/IpSimple.Platform.sln --configuration Release --output src/IpSimple.Platform/bin/Release
  test:
    runs-on: ubuntu-latest
    needs: [determine-version, build]
    outputs:
      test_summary: ${{ steps.test_summary.outputs.summary }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Find and run all test projects
      id: run_tests
      run: |
        echo "Starting test execution..."
        test_projects=$(find . -name "*.Tests.csproj")
        total_projects=0
        passed_projects=0
        
        if [ -z "$test_projects" ]; then
          echo "No test projects found."
          echo "test_projects_found=false" >> $GITHUB_OUTPUT
        else
          echo "test_projects_found=true" >> $GITHUB_OUTPUT
          echo "Found test projects:"
          echo "$test_projects"
          
          for test_project in $test_projects; do
            echo "Running tests for: $test_project"
            total_projects=$((total_projects + 1))
            
            if dotnet test "$test_project" --configuration Release --logger "trx;LogFileName=test_results_$(basename $test_project .Tests.csproj).trx" --results-directory "TestResults" --verbosity normal; then
              passed_projects=$((passed_projects + 1))
              echo "✅ Tests passed for $test_project"
            else
              echo "❌ Tests failed for $test_project"
            fi
          done
        fi
        
        echo "total_projects=$total_projects" >> $GITHUB_OUTPUT
        echo "passed_projects=$passed_projects" >> $GITHUB_OUTPUT

    - name: Generate test summary
      id: test_summary
      run: |
        if [ "${{ steps.run_tests.outputs.test_projects_found }}" = "true" ]; then
          total=${{ steps.run_tests.outputs.total_projects }}
          passed=${{ steps.run_tests.outputs.passed_projects }}
          
          if [ $passed -eq $total ]; then
            summary="✅ All $total test project(s) passed successfully"
            status="success"
          else
            failed=$((total - passed))
            summary="❌ $passed/$total test projects passed ($failed failed)"
            status="failure"
          fi
        else
          summary="⚠️ No test projects found in the solution"
          status="warning"
        fi
        
        echo "summary=$summary" >> $GITHUB_OUTPUT
        echo "status=$status" >> $GITHUB_OUTPUT
        echo "Test Summary: $summary"

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: ipsimple-unit-test-results-${{ needs.determine-version.outputs.version }}
        path: TestResults/
      if: ${{ always() && steps.run_tests.outputs.test_projects_found == 'true' }}
      
    - name: Fail job if tests failed
      if: steps.test_summary.outputs.status == 'failure'
      run: |
        echo "Some tests failed. Failing the job."
        exit 1
  publish-release:
    runs-on: ubuntu-latest
    needs: [determine-version, build, test, codeql-scan]
    if: success()
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure Git user
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions Bot"

    - name: Generate comprehensive release notes
      id: generate_notes
      run: |
        echo "Generating comprehensive release notes..."
        
        # Get commit messages since last tag
        LAST_TAG=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 2 | head -n 1)
        if [ -z "$LAST_TAG" ]; then
          COMMIT_RANGE="HEAD~10..HEAD"
        else
          COMMIT_RANGE="${LAST_TAG}..HEAD"
        fi
        
        # Create release notes content
        cat << 'EOF' > release_notes.md
        ## 🚀 What's New in ${{ needs.determine-version.outputs.version }}
        
        ### 📋 Changes in This Release
        EOF
        
        # Add commit messages
        echo "" >> release_notes.md
        git log $COMMIT_RANGE --pretty=format:"- %s (%h)" --reverse >> release_notes.md
          # Add build information
        cat << 'EOF' >> release_notes.md
        
        ### 🏗️ Build Information
        - **Build Number:** #${{ github.run_number }}
        - **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **Commit SHA:** ${{ github.sha }}
        - **Branch:** ${{ github.ref_name }}
        - **.NET Version:** 9.0.x
        - **Configuration:** Release
        
        ### 🧪 Testing & Quality
        - ${{ needs.test.outputs.test_summary }}
        - ${{ needs.codeql-scan.outputs.security_status }}
        - ✅ Build verification successful
        - 📊 Detailed test results available in workflow artifacts
        
        ### 🔒 Security
        - 🛡️ CodeQL static analysis performed
        - 🔍 Vulnerability scanning completed
        - 📋 SBOM (Software Bill of Materials) generated
        
        ### 📦 Artifacts & Downloads
        
        #### Docker Image
        The containerized application is available on GitHub Container Registry:
        
        ```bash
        # Pull the Docker image
        docker pull ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }}
        
        # Run the container
        docker run -p 8080:8080 ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }}
        ```
        
        #### Available Artifacts
        - 🔧 **Compiled Binaries:** `dotnet-binaries`
        - 🧪 **Test Results:** `ipsimple-unit-test-results-${{ needs.determine-version.outputs.version }}`
        - 📋 **SBOM Report:** `ipsimple-${{ needs.determine-version.outputs.version }}-sbom`
        
        ### 🎯 API Endpoints
        This release includes the following API endpoints:
        - `GET /api/ip` - Get client IP address information
        - `GET /api/ip/v4` - Get IPv4 address only
        - `GET /api/ip/v6` - Get IPv6 address only
        - `GET /api/ip/all` - Get all detected IP addresses
        
        ### 📈 Performance Notes
        - Optimized for high-throughput scenarios
        - Designed to handle 1000+ requests per second
        - Minimal memory allocation patterns
        - Efficient IP address parsing and validation
        
        ### 🔗 Related Links
        - [Docker Image on GHCR](https://github.com/ipsimple/platform/pkgs/container/ipsimple-app)
        - [Workflow Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [Source Code](${{ github.server_url }}/${{ github.repository }}/tree/${{ github.sha }})
        
        ---
        
        **Full Changelog:** https://github.com/${{ github.repository }}/compare/${LAST_TAG:-v0.0.0}...${{ needs.determine-version.outputs.version }}
        EOF
        
        # Store the release notes content
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create Git Tag
      run: |
        git tag -a ${{ needs.determine-version.outputs.version }} -m "Release version ${{ needs.determine-version.outputs.version }}"
        git push origin ${{ needs.determine-version.outputs.version }}

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.determine-version.outputs.version }}
        name: "🚀 IpSimple Platform ${{ needs.determine-version.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List all files in the src directory for troubleshooting
      run: ls -R src/

    - name: Upload .NET binaries
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-binaries
        path: src/IpSimple.Platform/bin/Release/**
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: [determine-version, publish-release]
    outputs:
      image_digest: ${{ steps.build_image.outputs.digest }}
      image_size: ${{ steps.image_info.outputs.size }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Docker registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      id: build_image
      run: |
         echo "Using version: ${{ needs.determine-version.outputs.version }}"
         docker build -f src/IpSimple.PublicIp.Api/Dockerfile -t ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} src/
         docker push ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }}
         
         # Get image digest
         DIGEST=$(docker inspect ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
         echo "digest=$DIGEST" >> $GITHUB_OUTPUT

    - name: Get image information
      id: image_info
      run: |
         # Get image size
         SIZE=$(docker images ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} --format "{{.Size}}")
         echo "size=$SIZE" >> $GITHUB_OUTPUT
         echo "Image size: $SIZE"
         
         # Get image layers info
         docker history ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} --no-trunc  generate-sbom:
   
    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin

    - name: Generate SBOM
      run: |
        syft scan docker:ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} -o syft-json > sbom.json
        syft scan docker:ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} -o table > sbom-summary.txt

    - name: Upload SBOM to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ipsimple-${{ needs.determine-version.outputs.version }}-sbom
        path: |
          sbom.json
          sbom-summary.txt

    - name: Attach SBOM to Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.determine-version.outputs.version }}
        files: |
          sbom.json
          sbom-summary.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-with-final-info:
    runs-on: ubuntu-latest
    needs: [determine-version, build-and-push-docker, publish-release]
    if: success()
    steps:
    - name: Update release with final build information
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.determine-version.outputs.version }}
        append_body: |
          
          ### 📊 Final Build Statistics
          - **Docker Image Size:** ${{ needs.build-and-push-docker.outputs.image_size }}
          - **Docker Image Digest:** `${{ needs.build-and-push-docker.outputs.image_digest }}`
          - **SBOM Generated:** ✅ Available in release assets
          - **Build Completed:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 🔍 Verification Commands
          ```bash
          # Verify image integrity
          docker pull ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }}@${{ needs.build-and-push-docker.outputs.image_digest }}
          
          # Quick health check
          docker run --rm -p 8080:8080 ghcr.io/ipsimple/ipsimple-app:${{ needs.determine-version.outputs.version }} &
          sleep 5
          curl http://localhost:8080/api/ip
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}